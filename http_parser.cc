
/* #line 1 "http_parser.rl" */
/**
      HTTP parser for packet sniffer
      Author: Ilya Gavrilov <gilyav@gmail.com>
*/

#include <stdio.h>
#include <string.h>
#include <inttypes.h>
#include <string>
#include <iostream>
#include <list>
#include "http.h"


//output format:
//"%request.timestamp %source.ip %dest.ip  %request.header.host %request.line  %response.protocol %response.size %response.code
void end_msg(bool cli, http_state_t *state)
{
    if(cli)
        state->end_message(state->host + " " + state->req_line);
    else
        state->end_message(" " + state->protocol + " " + state->content_len_str + " " + state->code + " -");
}


/* #line 30 "http_parser.rl" */



/* #line 33 "http_parser.cc" */
static const char _http_srv_actions[] = {
	0, 1, 1, 1, 4, 1, 5, 1, 
	6, 1, 7, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 14, 1, 
	15, 1, 16, 2, 0, 12, 2, 2, 
	3, 2, 8, 9, 2, 8, 10, 2, 
	11, 16, 2, 15, 11, 3, 6, 2, 
	3, 3, 15, 11, 16
};

static const char _http_srv_cond_offsets[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 5, 5, 10, 10, 15, 
	20, 20, 25, 25, 25, 25
};

static const char _http_srv_cond_lengths[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 5, 0, 5, 0, 5, 5, 
	0, 5, 0, 0, 0, 5
};

static const short _http_srv_cond_keys[] = {
	-128, 9, 10, 10, 11, 12, 13, 13, 
	14, 127, -128, 9, 10, 10, 11, 12, 
	13, 13, 14, 127, -128, 9, 10, 10, 
	11, 12, 13, 13, 14, 127, -128, 9, 
	10, 10, 11, 12, 13, 13, 14, 127, 
	-128, 9, 10, 10, 11, 12, 13, 13, 
	14, 127, -128, 9, 10, 10, 11, 12, 
	13, 13, 14, 127, 0
};

static const char _http_srv_cond_spaces[] = {
	0, 2, 0, 2, 0, 0, 2, 0, 
	2, 0, 0, 2, 0, 2, 0, 0, 
	2, 0, 2, 0, 0, 2, 0, 2, 
	0, 0, 2, 0, 2, 0, 0
};

static const short _http_srv_key_offsets[] = {
	0, 0, 2, 4, 6, 8, 9, 11, 
	12, 14, 16, 20, 22, 24, 26, 35, 
	38, 40, 42, 51, 52, 57, 62, 67, 
	72, 77, 82, 86, 91, 96, 101, 106, 
	111, 116, 119, 125, 131, 132, 136, 141, 
	146, 151, 154, 156, 158, 163, 168, 173, 
	178, 183, 188, 193, 197, 202, 207, 212, 
	217, 222, 227, 232, 237, 240, 246, 252, 
	256, 260, 264, 268, 272, 276, 278, 279, 
	279, 285, 293, 305, 306, 338, 339, 352, 
	365, 366, 379, 381, 381, 387
};

static const short _http_srv_trans_keys[] = {
	72, 104, 84, 116, 84, 116, 80, 112, 
	47, 48, 57, 46, 48, 57, 9, 32, 
	9, 32, 48, 57, 48, 57, 48, 57, 
	10, 13, 10, 13, 58, 67, 72, 84, 
	99, 104, 116, 10, 13, 58, 10, 13, 
	10, 13, 10, 13, 58, 67, 72, 84, 
	99, 104, 116, 10, 10, 13, 58, 79, 
	111, 10, 13, 58, 78, 110, 10, 13, 
	58, 84, 116, 10, 13, 58, 69, 101, 
	10, 13, 58, 78, 110, 10, 13, 58, 
	84, 116, 10, 13, 45, 58, 10, 13, 
	58, 76, 108, 10, 13, 58, 69, 101, 
	10, 13, 58, 78, 110, 10, 13, 58, 
	71, 103, 10, 13, 58, 84, 116, 10, 
	13, 58, 72, 104, 10, 13, 58, 9, 
	10, 13, 32, 48, 57, 9, 10, 13, 
	32, 48, 57, 10, 10, 13, 48, 57, 
	10, 13, 58, 79, 111, 10, 13, 58, 
	83, 115, 10, 13, 58, 84, 116, 10, 
	13, 58, 10, 13, 10, 13, 10, 13, 
	58, 82, 114, 10, 13, 58, 65, 97, 
	10, 13, 58, 78, 110, 10, 13, 58, 
	83, 115, 10, 13, 58, 70, 102, 10, 
	13, 58, 69, 101, 10, 13, 58, 82, 
	114, 10, 13, 45, 58, 10, 13, 58, 
	69, 101, 10, 13, 58, 78, 110, 10, 
	13, 58, 67, 99, 10, 13, 58, 79, 
	111, 10, 13, 58, 68, 100, 10, 13, 
	58, 73, 105, 10, 13, 58, 78, 110, 
	10, 13, 58, 71, 103, 10, 13, 58, 
	9, 10, 13, 32, 67, 99, 9, 10, 
	13, 32, 67, 99, 10, 13, 72, 104, 
	10, 13, 85, 117, 10, 13, 78, 110, 
	10, 13, 75, 107, 10, 13, 69, 101, 
	10, 13, 68, 100, 10, 13, 10, 48, 
	57, 65, 70, 97, 102, 10, 13, 48, 
	57, 65, 70, 97, 102, 1546, 1549, 1802, 
	1805, 2058, 2061, 384, 521, 523, 524, 526, 
	639, 10, 1290, 1293, 1546, 1549, 1802, 1805, 
	2058, 2061, 304, 313, 321, 326, 353, 358, 
	384, 521, 523, 524, 526, 559, 560, 569, 
	570, 576, 577, 582, 583, 608, 609, 614, 
	615, 639, 10, 1290, 1546, 1549, 1802, 1805, 
	2058, 2061, 384, 521, 523, 524, 526, 639, 
	1290, 1546, 1549, 1802, 1805, 2058, 2061, 384, 
	521, 523, 524, 526, 639, 10, 1290, 1546, 
	1549, 1802, 1805, 2058, 2061, 384, 521, 523, 
	524, 526, 639, 72, 104, 48, 57, 65, 
	70, 97, 102, 1546, 1549, 1802, 1805, 2058, 
	2061, 304, 313, 321, 326, 353, 358, 384, 
	521, 523, 524, 526, 559, 560, 569, 570, 
	576, 577, 582, 583, 608, 609, 614, 615, 
	639, 0
};

static const char _http_srv_single_lengths[] = {
	0, 2, 2, 2, 2, 1, 0, 1, 
	0, 2, 2, 0, 0, 2, 9, 3, 
	2, 2, 9, 1, 5, 5, 5, 5, 
	5, 5, 4, 5, 5, 5, 5, 5, 
	5, 3, 4, 4, 1, 2, 5, 5, 
	5, 3, 2, 2, 5, 5, 5, 5, 
	5, 5, 5, 4, 5, 5, 5, 5, 
	5, 5, 5, 5, 3, 6, 6, 4, 
	4, 4, 4, 4, 4, 2, 1, 0, 
	0, 2, 6, 1, 8, 1, 7, 7, 
	1, 7, 2, 0, 0, 6
};

static const char _http_srv_range_lengths[] = {
	0, 0, 0, 0, 0, 0, 1, 0, 
	1, 0, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	3, 3, 3, 0, 12, 0, 3, 3, 
	0, 3, 0, 0, 3, 12
};

static const short _http_srv_index_offsets[] = {
	0, 0, 3, 6, 9, 12, 14, 16, 
	18, 20, 23, 27, 29, 31, 34, 44, 
	48, 51, 54, 64, 66, 72, 78, 84, 
	90, 96, 102, 107, 113, 119, 125, 131, 
	137, 143, 147, 153, 159, 161, 165, 171, 
	177, 183, 187, 190, 193, 199, 205, 211, 
	217, 223, 229, 235, 240, 246, 252, 258, 
	264, 270, 276, 282, 288, 292, 299, 306, 
	311, 316, 321, 326, 331, 336, 339, 341, 
	342, 346, 352, 362, 364, 385, 387, 398, 
	409, 411, 422, 425, 426, 430
};

static const char _http_srv_indicies[] = {
	0, 0, 1, 2, 2, 1, 3, 3, 
	1, 4, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 9, 1, 10, 
	10, 11, 1, 12, 1, 13, 1, 15, 
	16, 14, 18, 19, 1, 20, 21, 22, 
	20, 21, 22, 17, 1, 1, 23, 17, 
	1, 1, 24, 25, 26, 24, 28, 29, 
	1, 30, 31, 32, 30, 31, 32, 27, 
	18, 1, 1, 1, 23, 33, 33, 17, 
	1, 1, 23, 34, 34, 17, 1, 1, 
	23, 35, 35, 17, 1, 1, 23, 36, 
	36, 17, 1, 1, 23, 37, 37, 17, 
	1, 1, 23, 38, 38, 17, 1, 1, 
	39, 23, 17, 1, 1, 23, 40, 40, 
	17, 1, 1, 23, 41, 41, 17, 1, 
	1, 23, 42, 42, 17, 1, 1, 23, 
	43, 43, 17, 1, 1, 23, 44, 44, 
	17, 1, 1, 23, 45, 45, 17, 1, 
	1, 46, 17, 47, 1, 1, 47, 48, 
	24, 47, 25, 26, 47, 48, 24, 25, 
	1, 49, 50, 51, 24, 1, 1, 23, 
	52, 52, 17, 1, 1, 23, 53, 53, 
	17, 1, 1, 23, 54, 54, 17, 1, 
	1, 55, 17, 1, 1, 56, 25, 26, 
	56, 1, 1, 23, 57, 57, 17, 1, 
	1, 23, 58, 58, 17, 1, 1, 23, 
	59, 59, 17, 1, 1, 23, 60, 60, 
	17, 1, 1, 23, 61, 61, 17, 1, 
	1, 23, 62, 62, 17, 1, 1, 23, 
	63, 63, 17, 1, 1, 64, 23, 17, 
	1, 1, 23, 65, 65, 17, 1, 1, 
	23, 66, 66, 17, 1, 1, 23, 67, 
	67, 17, 1, 1, 23, 68, 68, 17, 
	1, 1, 23, 69, 69, 17, 1, 1, 
	23, 70, 70, 17, 1, 1, 23, 71, 
	71, 17, 1, 1, 23, 72, 72, 17, 
	1, 1, 73, 17, 74, 1, 1, 74, 
	75, 75, 24, 74, 25, 26, 74, 75, 
	75, 24, 25, 26, 76, 76, 24, 25, 
	26, 77, 77, 24, 25, 26, 78, 78, 
	24, 25, 26, 79, 79, 24, 25, 26, 
	80, 80, 24, 25, 26, 81, 81, 24, 
	82, 83, 24, 15, 1, 84, 85, 85, 
	85, 1, 86, 87, 88, 88, 88, 1, 
	89, 89, 90, 91, 92, 93, 89, 89, 
	89, 1, 90, 1, 86, 87, 86, 95, 
	96, 97, 96, 98, 88, 88, 88, 89, 
	89, 89, 94, 89, 94, 89, 94, 89, 
	1, 99, 1, 99, 99, 89, 100, 91, 
	100, 93, 89, 89, 89, 1, 90, 92, 
	89, 90, 91, 92, 93, 89, 89, 89, 
	1, 100, 1, 100, 100, 89, 100, 91, 
	100, 93, 89, 89, 89, 1, 0, 0, 
	1, 84, 85, 85, 85, 1, 89, 89, 
	90, 91, 92, 93, 85, 85, 85, 89, 
	89, 89, 101, 89, 101, 89, 101, 89, 
	1, 0
};

static const char _http_srv_trans_targs[] = {
	2, 0, 3, 4, 5, 6, 7, 8, 
	9, 10, 10, 11, 12, 13, 13, 14, 
	70, 15, 82, 19, 20, 38, 44, 16, 
	17, 18, 36, 15, 82, 19, 20, 38, 
	44, 21, 22, 23, 24, 25, 26, 27, 
	28, 29, 30, 31, 32, 33, 34, 35, 
	37, 18, 36, 37, 39, 40, 41, 42, 
	43, 45, 46, 47, 48, 49, 50, 51, 
	52, 53, 54, 55, 56, 57, 58, 59, 
	60, 61, 62, 63, 64, 65, 66, 67, 
	68, 69, 18, 36, 83, 73, 74, 77, 
	73, 74, 84, 75, 85, 79, 76, 78, 
	85, 80, 81, 74, 85, 76
};

static const char _http_srv_trans_actions[] = {
	27, 0, 17, 17, 17, 17, 17, 17, 
	17, 1, 0, 21, 21, 21, 0, 0, 
	0, 0, 30, 0, 0, 0, 0, 0, 
	0, 0, 0, 7, 45, 7, 7, 7, 
	7, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	33, 3, 3, 11, 0, 0, 0, 0, 
	19, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 5, 5, 9, 36, 42, 23, 
	13, 0, 25, 0, 25, 0, 13, 23, 
	49, 23, 23, 15, 39, 36
};

static const int http_srv_start = 1;
static const int http_srv_first_final = 82;
static const int http_srv_error = 0;

static const int http_srv_en_http_content = 71;
static const int http_srv_en_http_chunked_content = 72;
static const int http_srv_en_main = 1;


/* #line 33 "http_parser.rl" */

void http_state_t::init_srv(http_state_t::callback f)
{
    end_message = f;
	
/* #line 309 "http_parser.cc" */
	{
	cs = http_srv_start;
	top = 0;
	}

/* #line 38 "http_parser.rl" */
}

int http_state_t::parse_srv(const char *data, int length, int isEof)
{
	const char *p = data;
	const char *pe = data + length;
	const char *eof = isEof ? pe : 0;
    bool cli = false;

	
/* #line 326 "http_parser.cc" */
	{
	int _klen;
	unsigned int _trans;
	short _widec;
	const char *_acts;
	unsigned int _nacts;
	const short *_keys;

	if ( p == pe )
		goto _test_eof;
	if ( cs == 0 )
		goto _out;
_resume:
	_widec = (*p);
	_klen = _http_srv_cond_lengths[cs];
	_keys = _http_srv_cond_keys + (_http_srv_cond_offsets[cs]*2);
	if ( _klen > 0 ) {
		const short *_lower = _keys;
		const short *_mid;
		const short *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( _widec < _mid[0] )
				_upper = _mid - 2;
			else if ( _widec > _mid[1] )
				_lower = _mid + 2;
			else {
				switch ( _http_srv_cond_spaces[_http_srv_cond_offsets[cs] + ((_mid - _keys)>>1)] ) {
	case 0: {
		_widec = (short)(128 + ((*p) - -128));
		if ( 
/* #line 123 "./http.rl" */
data_read_len-- > 0 ) _widec += 256;
		break;
	}
	case 1: {
		_widec = (short)(640 + ((*p) - -128));
		if ( 
/* #line 123 "./http.rl" */
data_read_len <= 0 ) _widec += 256;
		break;
	}
	case 2: {
		_widec = (short)(1152 + ((*p) - -128));
		if ( 
/* #line 123 "./http.rl" */
data_read_len-- > 0 ) _widec += 256;
		if ( 
/* #line 123 "./http.rl" */
data_read_len <= 0 ) _widec += 512;
		break;
	}
				}
				break;
			}
		}
	}

	_keys = _http_srv_trans_keys + _http_srv_key_offsets[cs];
	_trans = _http_srv_index_offsets[cs];

	_klen = _http_srv_single_lengths[cs];
	if ( _klen > 0 ) {
		const short *_lower = _keys;
		const short *_mid;
		const short *_upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( _widec < *_mid )
				_upper = _mid - 1;
			else if ( _widec > *_mid )
				_lower = _mid + 1;
			else {
				_trans += (unsigned int)(_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _http_srv_range_lengths[cs];
	if ( _klen > 0 ) {
		const short *_lower = _keys;
		const short *_mid;
		const short *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( _widec < _mid[0] )
				_upper = _mid - 2;
			else if ( _widec > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += (unsigned int)((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}

_match:
	_trans = _http_srv_indicies[_trans];
	cs = _http_srv_trans_targs[_trans];

	if ( _http_srv_trans_actions[_trans] == 0 )
		goto _again;

	_acts = _http_srv_actions + _http_srv_trans_actions[_trans];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 )
	{
		switch ( *_acts++ )
		{
	case 0:
/* #line 15 "./http.rl" */
	{
        clear();
    }
	break;
	case 1:
/* #line 28 "./http.rl" */
	{
	}
	break;
	case 2:
/* #line 31 "./http.rl" */
	{
	}
	break;
	case 3:
/* #line 34 "./http.rl" */
	{
        if(chunked != 0) {
            {stack[top++] = cs; cs = 72; goto _again;}
        }
        else if(content_len!=0) {
            content_start = len + (p-data);
            {stack[top++] = cs; cs = 71; goto _again;}
        }

        end_msg(cli, this);
	}
	break;
	case 4:
/* #line 46 "./http.rl" */
	{
        content_len = data_len;
        content_len_str = std::to_string(content_len);
	}
	break;
	case 5:
/* #line 51 "./http.rl" */
	{
        chunked = 1;
	}
	break;
	case 6:
/* #line 55 "./http.rl" */
	{
	}
	break;
	case 7:
/* #line 58 "./http.rl" */
	{
        if(content_start && len+(p-data) - content_start >= content_len)
        {
            end_msg(cli, this);
            {cs = stack[--top]; goto _again;}
        }
	}
	break;
	case 8:
/* #line 67 "./http.rl" */
	{
        data_len = 0;
        data_read_len = 0;
    }
	break;
	case 9:
/* #line 73 "./http.rl" */
	{
        int digit = (*p) - '0';
        data_len = (data_len * 10) + digit;
    }
	break;
	case 10:
/* #line 79 "./http.rl" */
	{
        data_len = (data_len <<4 ) + (*p>='a'?*p-87:(*p>='A'?*p-55:*p-'0'));
    }
	break;
	case 11:
/* #line 84 "./http.rl" */
	{
        data_read_len = data_len;
    }
	break;
	case 12:
/* #line 97 "./http.rl" */
	{add(protocol,*p);}
	break;
	case 13:
/* #line 103 "./http.rl" */
	{add(host,*p);}
	break;
	case 14:
/* #line 113 "./http.rl" */
	{add(code,*p);}
	break;
	case 15:
/* #line 119 "./http.rl" */
	{
        content_len += data_len;
    }
	break;
	case 16:
/* #line 123 "./http.rl" */
	{if(data_len==0) { content_len_str = std::to_string(content_len); end_msg(cli, this); {cs = stack[--top]; goto _again;}}}
	break;
/* #line 555 "http_parser.cc" */
		}
	}

_again:
	if ( cs == 0 )
		goto _out;
	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	_out: {}
	}

/* #line 48 "http_parser.rl" */

    len += length;
    if ( cs == http_srv_error )
        return -1;
    return 0;
}

void http_state_t::add(std::string& str, char *data)
{
    if( str.length() + strlen(data) > MAX_REQ_LEN )
        return;
    str.append(data);
}

void http_state_t::add(std::string& str, char ch)
{
    if( str.length() + 1 > MAX_REQ_LEN )
        return;
    str.append(1,ch);
}


/* #line 76 "http_parser.rl" */



/* #line 595 "http_parser.cc" */
static const char _http_cli_actions[] = {
	0, 1, 4, 1, 6, 1, 7, 1, 
	8, 1, 9, 1, 11, 1, 12, 1, 
	13, 1, 15, 1, 16, 1, 17, 1, 
	18, 2, 0, 16, 2, 1, 16, 2, 
	2, 16, 2, 3, 5, 2, 4, 16, 
	2, 10, 11, 2, 10, 12, 2, 13, 
	18, 2, 14, 16, 2, 16, 0, 2, 
	16, 6, 2, 16, 7, 2, 16, 8, 
	2, 16, 11, 2, 16, 15, 2, 17, 
	13, 3, 1, 2, 16, 3, 2, 16, 
	8, 3, 2, 16, 15, 3, 8, 3, 
	5, 3, 14, 16, 15, 3, 16, 3, 
	5, 3, 16, 10, 11, 3, 17, 13, 
	18, 4, 16, 8, 3, 5
};

static const char _http_cli_cond_offsets[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 5, 5, 10, 10, 15, 20, 20, 
	25, 25, 25, 25, 25
};

static const char _http_cli_cond_lengths[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	5, 0, 5, 0, 5, 5, 0, 5, 
	0, 0, 0, 0, 5
};

static const short _http_cli_cond_keys[] = {
	-128, 9, 10, 10, 11, 12, 13, 13, 
	14, 127, -128, 9, 10, 10, 11, 12, 
	13, 13, 14, 127, -128, 9, 10, 10, 
	11, 12, 13, 13, 14, 127, -128, 9, 
	10, 10, 11, 12, 13, 13, 14, 127, 
	-128, 9, 10, 10, 11, 12, 13, 13, 
	14, 127, -128, 9, 10, 10, 11, 12, 
	13, 13, 14, 127, 0
};

static const char _http_cli_cond_spaces[] = {
	0, 2, 0, 2, 0, 0, 2, 0, 
	2, 0, 0, 2, 0, 2, 0, 0, 
	2, 0, 2, 0, 0, 2, 0, 2, 
	0, 0, 2, 0, 2, 0, 0
};

static const short _http_cli_key_offsets[] = {
	0, 0, 16, 18, 20, 22, 24, 26, 
	28, 30, 32, 34, 38, 42, 44, 46, 
	48, 49, 51, 52, 54, 56, 65, 68, 
	70, 72, 81, 83, 85, 87, 89, 91, 
	93, 95, 97, 99, 101, 103, 105, 111, 
	113, 115, 117, 119, 121, 123, 125, 127, 
	129, 130, 135, 140, 145, 150, 155, 160, 
	164, 169, 174, 179, 184, 189, 194, 197, 
	203, 209, 210, 214, 219, 224, 229, 232, 
	234, 236, 241, 246, 251, 256, 261, 266, 
	271, 275, 280, 285, 290, 295, 300, 305, 
	310, 315, 318, 324, 330, 334, 338, 342, 
	346, 350, 354, 356, 357, 361, 365, 369, 
	372, 376, 379, 383, 387, 398, 403, 410, 
	417, 422, 427, 432, 436, 441, 445, 450, 
	453, 457, 461, 467, 478, 482, 486, 490, 
	494, 498, 502, 504, 508, 512, 516, 520, 
	524, 528, 532, 536, 540, 544, 548, 552, 
	556, 560, 568, 572, 576, 580, 584, 588, 
	592, 596, 600, 604, 607, 614, 621, 628, 
	635, 642, 649, 655, 662, 669, 676, 683, 
	690, 697, 702, 708, 716, 719, 727, 731, 
	735, 739, 742, 746, 749, 753, 755, 761, 
	767, 773, 779, 785, 790, 796, 801, 807, 
	811, 818, 825, 832, 837, 841, 845, 851, 
	857, 861, 865, 869, 872, 876, 879, 883, 
	885, 891, 897, 903, 908, 914, 919, 925, 
	929, 936, 943, 950, 957, 964, 971, 978, 
	984, 991, 998, 1005, 1012, 1019, 1026, 1033, 
	1040, 1045, 1051, 1059, 1067, 1073, 1079, 1085, 
	1091, 1097, 1103, 1107, 1114, 1121, 1128, 1134, 
	1141, 1147, 1154, 1159, 1162, 1164, 1164, 1170, 
	1178, 1190, 1191, 1223, 1224, 1237, 1250, 1251, 
	1264, 1280, 1298, 1298, 1304
};

static const short _http_cli_trans_keys[] = {
	67, 68, 71, 72, 76, 80, 84, 85, 
	99, 100, 103, 104, 108, 112, 116, 117, 
	79, 111, 78, 110, 78, 110, 69, 101, 
	67, 99, 84, 116, 9, 32, 9, 32, 
	9, 32, 9, 32, 72, 104, 9, 32, 
	72, 104, 84, 116, 84, 116, 80, 112, 
	47, 48, 57, 46, 48, 57, 10, 13, 
	10, 13, 58, 67, 72, 84, 99, 104, 
	116, 10, 13, 58, 10, 13, 10, 13, 
	10, 13, 58, 67, 72, 84, 99, 104, 
	116, 69, 101, 76, 108, 69, 101, 84, 
	116, 69, 101, 69, 101, 69, 101, 65, 
	97, 68, 100, 73, 105, 78, 110, 75, 
	107, 65, 79, 85, 97, 111, 117, 84, 
	116, 67, 99, 72, 104, 83, 115, 82, 
	114, 65, 97, 67, 99, 78, 110, 76, 
	108, 10, 10, 13, 58, 79, 111, 10, 
	13, 58, 78, 110, 10, 13, 58, 84, 
	116, 10, 13, 58, 69, 101, 10, 13, 
	58, 78, 110, 10, 13, 58, 84, 116, 
	10, 13, 45, 58, 10, 13, 58, 76, 
	108, 10, 13, 58, 69, 101, 10, 13, 
	58, 78, 110, 10, 13, 58, 71, 103, 
	10, 13, 58, 84, 116, 10, 13, 58, 
	72, 104, 10, 13, 58, 9, 10, 13, 
	32, 48, 57, 9, 10, 13, 32, 48, 
	57, 10, 10, 13, 48, 57, 10, 13, 
	58, 79, 111, 10, 13, 58, 83, 115, 
	10, 13, 58, 84, 116, 10, 13, 58, 
	10, 13, 10, 13, 10, 13, 58, 82, 
	114, 10, 13, 58, 65, 97, 10, 13, 
	58, 78, 110, 10, 13, 58, 83, 115, 
	10, 13, 58, 70, 102, 10, 13, 58, 
	69, 101, 10, 13, 58, 82, 114, 10, 
	13, 45, 58, 10, 13, 58, 69, 101, 
	10, 13, 58, 78, 110, 10, 13, 58, 
	67, 99, 10, 13, 58, 79, 111, 10, 
	13, 58, 68, 100, 10, 13, 58, 73, 
	105, 10, 13, 58, 78, 110, 10, 13, 
	58, 71, 103, 10, 13, 58, 9, 10, 
	13, 32, 67, 99, 9, 10, 13, 32, 
	67, 99, 10, 13, 72, 104, 10, 13, 
	85, 117, 10, 13, 78, 110, 10, 13, 
	75, 107, 10, 13, 69, 101, 10, 13, 
	68, 100, 10, 13, 10, 9, 32, 84, 
	116, 9, 32, 84, 116, 9, 32, 80, 
	112, 9, 32, 47, 9, 32, 48, 57, 
	9, 32, 46, 9, 32, 48, 57, 9, 
	10, 13, 32, 9, 10, 13, 32, 58, 
	67, 72, 84, 99, 104, 116, 9, 10, 
	13, 32, 58, 9, 10, 13, 32, 58, 
	72, 104, 9, 10, 13, 32, 58, 72, 
	104, 10, 13, 58, 84, 116, 10, 13, 
	58, 84, 116, 10, 13, 58, 80, 112, 
	10, 13, 47, 58, 10, 13, 58, 48, 
	57, 10, 13, 46, 58, 10, 13, 58, 
	48, 57, 10, 13, 58, 9, 10, 13, 
	32, 9, 10, 13, 32, 9, 10, 13, 
	32, 72, 104, 9, 10, 13, 32, 58, 
	67, 72, 84, 99, 104, 116, 9, 32, 
	79, 111, 9, 32, 78, 110, 9, 32, 
	78, 110, 9, 32, 69, 101, 9, 32, 
	67, 99, 9, 32, 84, 116, 9, 32, 
	9, 32, 72, 104, 9, 32, 72, 104, 
	9, 32, 69, 101, 9, 32, 76, 108, 
	9, 32, 69, 101, 9, 32, 84, 116, 
	9, 32, 69, 101, 9, 32, 69, 101, 
	9, 32, 69, 101, 9, 32, 65, 97, 
	9, 32, 68, 100, 9, 32, 73, 105, 
	9, 32, 78, 110, 9, 32, 75, 107, 
	9, 32, 65, 79, 85, 97, 111, 117, 
	9, 32, 84, 116, 9, 32, 67, 99, 
	9, 32, 72, 104, 9, 32, 83, 115, 
	9, 32, 82, 114, 9, 32, 65, 97, 
	9, 32, 67, 99, 9, 32, 78, 110, 
	9, 32, 76, 108, 9, 10, 32, 9, 
	10, 13, 32, 58, 79, 111, 9, 10, 
	13, 32, 58, 78, 110, 9, 10, 13, 
	32, 58, 84, 116, 9, 10, 13, 32, 
	58, 69, 101, 9, 10, 13, 32, 58, 
	78, 110, 9, 10, 13, 32, 58, 84, 
	116, 9, 10, 13, 32, 45, 58, 9, 
	10, 13, 32, 58, 76, 108, 9, 10, 
	13, 32, 58, 69, 101, 9, 10, 13, 
	32, 58, 78, 110, 9, 10, 13, 32, 
	58, 71, 103, 9, 10, 13, 32, 58, 
	84, 116, 9, 10, 13, 32, 58, 72, 
	104, 9, 10, 13, 32, 58, 9, 10, 
	13, 32, 48, 57, 9, 10, 13, 32, 
	72, 104, 48, 57, 9, 10, 32, 9, 
	10, 13, 32, 72, 104, 48, 57, 10, 
	13, 84, 116, 10, 13, 84, 116, 10, 
	13, 80, 112, 10, 13, 47, 10, 13, 
	48, 57, 10, 13, 46, 10, 13, 48, 
	57, 10, 13, 9, 10, 13, 32, 48, 
	57, 9, 10, 13, 32, 72, 104, 9, 
	10, 13, 32, 84, 116, 9, 10, 13, 
	32, 84, 116, 9, 10, 13, 32, 80, 
	112, 9, 10, 13, 32, 47, 9, 10, 
	13, 32, 48, 57, 9, 10, 13, 32, 
	46, 9, 10, 13, 32, 48, 57, 9, 
	10, 13, 32, 9, 10, 13, 32, 58, 
	79, 111, 9, 10, 13, 32, 58, 83, 
	115, 9, 10, 13, 32, 58, 84, 116, 
	9, 10, 13, 32, 58, 9, 10, 13, 
	32, 9, 10, 13, 32, 9, 10, 13, 
	32, 72, 104, 9, 10, 13, 32, 72, 
	104, 10, 13, 84, 116, 10, 13, 84, 
	116, 10, 13, 80, 112, 10, 13, 47, 
	10, 13, 48, 57, 10, 13, 46, 10, 
	13, 48, 57, 10, 13, 9, 10, 13, 
	32, 84, 116, 9, 10, 13, 32, 84, 
	116, 9, 10, 13, 32, 80, 112, 9, 
	10, 13, 32, 47, 9, 10, 13, 32, 
	48, 57, 9, 10, 13, 32, 46, 9, 
	10, 13, 32, 48, 57, 9, 10, 13, 
	32, 9, 10, 13, 32, 58, 82, 114, 
	9, 10, 13, 32, 58, 65, 97, 9, 
	10, 13, 32, 58, 78, 110, 9, 10, 
	13, 32, 58, 83, 115, 9, 10, 13, 
	32, 58, 70, 102, 9, 10, 13, 32, 
	58, 69, 101, 9, 10, 13, 32, 58, 
	82, 114, 9, 10, 13, 32, 45, 58, 
	9, 10, 13, 32, 58, 69, 101, 9, 
	10, 13, 32, 58, 78, 110, 9, 10, 
	13, 32, 58, 67, 99, 9, 10, 13, 
	32, 58, 79, 111, 9, 10, 13, 32, 
	58, 68, 100, 9, 10, 13, 32, 58, 
	73, 105, 9, 10, 13, 32, 58, 78, 
	110, 9, 10, 13, 32, 58, 71, 103, 
	9, 10, 13, 32, 58, 9, 10, 13, 
	32, 67, 99, 9, 10, 13, 32, 67, 
	72, 99, 104, 9, 10, 13, 32, 67, 
	72, 99, 104, 9, 10, 13, 32, 72, 
	104, 9, 10, 13, 32, 85, 117, 9, 
	10, 13, 32, 78, 110, 9, 10, 13, 
	32, 75, 107, 9, 10, 13, 32, 69, 
	101, 9, 10, 13, 32, 68, 100, 9, 
	10, 13, 32, 9, 10, 13, 32, 58, 
	84, 116, 9, 10, 13, 32, 58, 84, 
	116, 9, 10, 13, 32, 58, 80, 112, 
	9, 10, 13, 32, 47, 58, 9, 10, 
	13, 32, 58, 48, 57, 9, 10, 13, 
	32, 46, 58, 9, 10, 13, 32, 58, 
	48, 57, 9, 10, 13, 32, 58, 9, 
	10, 32, 9, 32, 48, 57, 65, 70, 
	97, 102, 10, 13, 48, 57, 65, 70, 
	97, 102, 1546, 1549, 1802, 1805, 2058, 2061, 
	384, 521, 523, 524, 526, 639, 10, 1290, 
	1293, 1546, 1549, 1802, 1805, 2058, 2061, 304, 
	313, 321, 326, 353, 358, 384, 521, 523, 
	524, 526, 559, 560, 569, 570, 576, 577, 
	582, 583, 608, 609, 614, 615, 639, 10, 
	1290, 1546, 1549, 1802, 1805, 2058, 2061, 384, 
	521, 523, 524, 526, 639, 1290, 1546, 1549, 
	1802, 1805, 2058, 2061, 384, 521, 523, 524, 
	526, 639, 10, 1290, 1546, 1549, 1802, 1805, 
	2058, 2061, 384, 521, 523, 524, 526, 639, 
	67, 68, 71, 72, 76, 80, 84, 85, 
	99, 100, 103, 104, 108, 112, 116, 117, 
	9, 32, 67, 68, 71, 72, 76, 80, 
	84, 85, 99, 100, 103, 104, 108, 112, 
	116, 117, 48, 57, 65, 70, 97, 102, 
	1546, 1549, 1802, 1805, 2058, 2061, 304, 313, 
	321, 326, 353, 358, 384, 521, 523, 524, 
	526, 559, 560, 569, 570, 576, 577, 582, 
	583, 608, 609, 614, 615, 639, 0
};

static const char _http_cli_single_lengths[] = {
	0, 16, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 4, 4, 2, 2, 2, 
	1, 0, 1, 0, 2, 9, 3, 2, 
	2, 9, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 6, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 5, 5, 5, 5, 5, 5, 4, 
	5, 5, 5, 5, 5, 5, 3, 4, 
	4, 1, 2, 5, 5, 5, 3, 2, 
	2, 5, 5, 5, 5, 5, 5, 5, 
	4, 5, 5, 5, 5, 5, 5, 5, 
	5, 3, 6, 6, 4, 4, 4, 4, 
	4, 4, 2, 1, 4, 4, 4, 3, 
	2, 3, 2, 4, 11, 5, 7, 7, 
	5, 5, 5, 4, 3, 4, 3, 3, 
	4, 4, 6, 11, 4, 4, 4, 4, 
	4, 4, 2, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 8, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 3, 7, 7, 7, 7, 
	7, 7, 6, 7, 7, 7, 7, 7, 
	7, 5, 4, 6, 3, 6, 4, 4, 
	4, 3, 2, 3, 2, 2, 4, 6, 
	6, 6, 6, 5, 4, 5, 4, 4, 
	7, 7, 7, 5, 4, 4, 6, 6, 
	4, 4, 4, 3, 2, 3, 2, 2, 
	6, 6, 6, 5, 4, 5, 4, 4, 
	7, 7, 7, 7, 7, 7, 7, 6, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	5, 6, 8, 8, 6, 6, 6, 6, 
	6, 6, 4, 7, 7, 7, 6, 5, 
	6, 5, 5, 3, 2, 0, 0, 2, 
	6, 1, 8, 1, 7, 7, 1, 7, 
	16, 18, 0, 0, 6
};

static const char _http_cli_range_lengths[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 0, 1, 0, 0, 
	0, 0, 1, 0, 1, 0, 1, 0, 
	0, 0, 0, 0, 1, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 1, 0, 
	0, 0, 0, 0, 1, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 1, 0, 0, 0, 0, 3, 3, 
	3, 0, 12, 0, 3, 3, 0, 3, 
	0, 0, 0, 3, 12
};

static const short _http_cli_index_offsets[] = {
	0, 0, 17, 20, 23, 26, 29, 32, 
	35, 38, 41, 44, 49, 54, 57, 60, 
	63, 65, 67, 69, 71, 74, 84, 88, 
	91, 94, 104, 107, 110, 113, 116, 119, 
	122, 125, 128, 131, 134, 137, 140, 147, 
	150, 153, 156, 159, 162, 165, 168, 171, 
	174, 176, 182, 188, 194, 200, 206, 212, 
	217, 223, 229, 235, 241, 247, 253, 257, 
	263, 269, 271, 275, 281, 287, 293, 297, 
	300, 303, 309, 315, 321, 327, 333, 339, 
	345, 350, 356, 362, 368, 374, 380, 386, 
	392, 398, 402, 409, 416, 421, 426, 431, 
	436, 441, 446, 449, 451, 456, 461, 466, 
	470, 474, 478, 482, 487, 499, 505, 513, 
	521, 527, 533, 539, 544, 549, 554, 559, 
	563, 568, 573, 580, 592, 597, 602, 607, 
	612, 617, 622, 625, 630, 635, 640, 645, 
	650, 655, 660, 665, 670, 675, 680, 685, 
	690, 695, 704, 709, 714, 719, 724, 729, 
	734, 739, 744, 749, 753, 761, 769, 777, 
	785, 793, 801, 808, 816, 824, 832, 840, 
	848, 856, 862, 868, 876, 880, 888, 893, 
	898, 903, 907, 911, 915, 919, 922, 928, 
	935, 942, 949, 956, 962, 968, 974, 980, 
	985, 993, 1001, 1009, 1015, 1020, 1025, 1032, 
	1039, 1044, 1049, 1054, 1058, 1062, 1066, 1070, 
	1073, 1080, 1087, 1094, 1100, 1106, 1112, 1118, 
	1123, 1131, 1139, 1147, 1155, 1163, 1171, 1179, 
	1186, 1194, 1202, 1210, 1218, 1226, 1234, 1242, 
	1250, 1256, 1263, 1272, 1281, 1288, 1295, 1302, 
	1309, 1316, 1323, 1328, 1336, 1344, 1352, 1359, 
	1366, 1373, 1380, 1386, 1390, 1393, 1394, 1398, 
	1404, 1414, 1416, 1437, 1439, 1450, 1461, 1463, 
	1474, 1491, 1510, 1511, 1515
};

static const short _http_cli_indicies[] = {
	0, 2, 3, 4, 5, 6, 7, 8, 
	0, 2, 3, 4, 5, 6, 7, 8, 
	1, 9, 9, 1, 10, 10, 1, 11, 
	11, 1, 12, 12, 1, 13, 13, 1, 
	14, 14, 1, 15, 15, 1, 17, 18, 
	16, 19, 20, 16, 19, 20, 21, 21, 
	16, 22, 22, 23, 23, 1, 24, 24, 
	1, 25, 25, 1, 26, 26, 1, 27, 
	1, 28, 1, 29, 1, 30, 1, 31, 
	32, 1, 34, 35, 1, 36, 37, 38, 
	36, 37, 38, 33, 1, 1, 39, 33, 
	1, 1, 40, 41, 42, 40, 44, 45, 
	1, 46, 47, 48, 46, 47, 48, 43, 
	49, 49, 1, 50, 50, 1, 51, 51, 
	1, 52, 52, 1, 14, 14, 1, 13, 
	13, 1, 53, 53, 1, 54, 54, 1, 
	14, 14, 1, 55, 55, 1, 56, 56, 
	1, 14, 14, 1, 57, 58, 13, 57, 
	58, 13, 1, 59, 59, 1, 60, 60, 
	1, 14, 14, 1, 13, 13, 1, 61, 
	61, 1, 62, 62, 1, 52, 52, 1, 
	63, 63, 1, 64, 64, 1, 34, 1, 
	1, 1, 39, 65, 65, 33, 1, 1, 
	39, 66, 66, 33, 1, 1, 39, 67, 
	67, 33, 1, 1, 39, 68, 68, 33, 
	1, 1, 39, 69, 69, 33, 1, 1, 
	39, 70, 70, 33, 1, 1, 71, 39, 
	33, 1, 1, 39, 72, 72, 33, 1, 
	1, 39, 73, 73, 33, 1, 1, 39, 
	74, 74, 33, 1, 1, 39, 75, 75, 
	33, 1, 1, 39, 76, 76, 33, 1, 
	1, 39, 77, 77, 33, 1, 1, 78, 
	33, 79, 1, 1, 79, 80, 40, 79, 
	41, 42, 79, 80, 40, 41, 1, 81, 
	82, 83, 40, 1, 1, 39, 84, 84, 
	33, 1, 1, 39, 85, 85, 33, 1, 
	1, 39, 86, 86, 33, 1, 1, 87, 
	33, 1, 1, 88, 41, 42, 88, 1, 
	1, 39, 89, 89, 33, 1, 1, 39, 
	90, 90, 33, 1, 1, 39, 91, 91, 
	33, 1, 1, 39, 92, 92, 33, 1, 
	1, 39, 93, 93, 33, 1, 1, 39, 
	94, 94, 33, 1, 1, 39, 95, 95, 
	33, 1, 1, 96, 39, 33, 1, 1, 
	39, 97, 97, 33, 1, 1, 39, 98, 
	98, 33, 1, 1, 39, 99, 99, 33, 
	1, 1, 39, 100, 100, 33, 1, 1, 
	39, 101, 101, 33, 1, 1, 39, 102, 
	102, 33, 1, 1, 39, 103, 103, 33, 
	1, 1, 39, 104, 104, 33, 1, 1, 
	105, 33, 106, 1, 1, 106, 107, 107, 
	40, 106, 41, 42, 106, 107, 107, 40, 
	41, 42, 108, 108, 40, 41, 42, 109, 
	109, 40, 41, 42, 110, 110, 40, 41, 
	42, 111, 111, 40, 41, 42, 112, 112, 
	40, 41, 42, 113, 113, 40, 114, 115, 
	40, 116, 1, 19, 20, 117, 117, 16, 
	19, 20, 118, 118, 16, 19, 20, 119, 
	119, 16, 19, 20, 120, 16, 19, 20, 
	121, 16, 19, 20, 122, 16, 19, 20, 
	123, 16, 19, 124, 125, 20, 16, 127, 
	128, 129, 130, 16, 131, 132, 133, 131, 
	132, 133, 126, 127, 16, 16, 130, 134, 
	126, 127, 16, 16, 130, 134, 135, 135, 
	126, 136, 1, 1, 136, 39, 137, 137, 
	33, 1, 1, 39, 138, 138, 33, 1, 
	1, 39, 139, 139, 33, 1, 1, 39, 
	140, 140, 33, 1, 1, 141, 39, 33, 
	1, 1, 39, 142, 33, 1, 1, 143, 
	39, 33, 1, 1, 39, 144, 33, 31, 
	32, 39, 33, 146, 16, 16, 147, 145, 
	146, 148, 149, 147, 145, 146, 148, 149, 
	147, 150, 150, 145, 152, 153, 154, 155, 
	16, 156, 157, 158, 156, 157, 158, 151, 
	19, 20, 159, 159, 16, 19, 20, 160, 
	160, 16, 19, 20, 161, 161, 16, 19, 
	20, 162, 162, 16, 19, 20, 163, 163, 
	16, 19, 20, 164, 164, 16, 165, 166, 
	16, 167, 168, 21, 21, 16, 169, 170, 
	21, 21, 16, 19, 20, 171, 171, 16, 
	19, 20, 172, 172, 16, 19, 20, 173, 
	173, 16, 19, 20, 174, 174, 16, 19, 
	20, 164, 164, 16, 19, 20, 163, 163, 
	16, 19, 20, 175, 175, 16, 19, 20, 
	176, 176, 16, 19, 20, 164, 164, 16, 
	19, 20, 177, 177, 16, 19, 20, 178, 
	178, 16, 19, 20, 164, 164, 16, 19, 
	20, 179, 180, 163, 179, 180, 163, 16, 
	19, 20, 181, 181, 16, 19, 20, 182, 
	182, 16, 19, 20, 164, 164, 16, 19, 
	20, 163, 163, 16, 19, 20, 183, 183, 
	16, 19, 20, 184, 184, 16, 19, 20, 
	174, 174, 16, 19, 20, 185, 185, 16, 
	19, 20, 186, 186, 16, 19, 128, 20, 
	16, 127, 16, 16, 130, 134, 187, 187, 
	126, 127, 16, 16, 130, 134, 188, 188, 
	126, 127, 16, 16, 130, 134, 189, 189, 
	126, 127, 16, 16, 130, 134, 190, 190, 
	126, 127, 16, 16, 130, 134, 191, 191, 
	126, 127, 16, 16, 130, 134, 192, 192, 
	126, 127, 16, 16, 130, 193, 134, 126, 
	127, 16, 16, 130, 134, 194, 194, 126, 
	127, 16, 16, 130, 134, 195, 195, 126, 
	127, 16, 16, 130, 134, 196, 196, 126, 
	127, 16, 16, 130, 134, 197, 197, 126, 
	127, 16, 16, 130, 134, 198, 198, 126, 
	127, 16, 16, 130, 134, 199, 199, 126, 
	127, 16, 16, 130, 200, 126, 201, 16, 
	16, 202, 203, 145, 201, 148, 149, 202, 
	150, 150, 203, 145, 19, 148, 20, 16, 
	204, 41, 42, 204, 205, 205, 80, 40, 
	41, 42, 206, 206, 40, 41, 42, 207, 
	207, 40, 41, 42, 208, 208, 40, 41, 
	42, 209, 40, 41, 42, 210, 40, 41, 
	42, 211, 40, 41, 42, 212, 40, 213, 
	214, 40, 146, 215, 216, 147, 217, 145, 
	218, 41, 42, 218, 205, 205, 40, 146, 
	148, 149, 147, 219, 219, 145, 146, 148, 
	149, 147, 220, 220, 145, 146, 148, 149, 
	147, 221, 221, 145, 146, 148, 149, 147, 
	222, 145, 146, 148, 149, 147, 223, 145, 
	146, 148, 149, 147, 224, 145, 146, 148, 
	149, 147, 225, 145, 146, 226, 227, 147, 
	145, 127, 16, 16, 130, 134, 228, 228, 
	126, 127, 16, 16, 130, 134, 229, 229, 
	126, 127, 16, 16, 130, 134, 230, 230, 
	126, 127, 16, 16, 130, 231, 126, 233, 
	16, 16, 234, 232, 233, 148, 149, 234, 
	232, 233, 148, 149, 234, 235, 235, 232, 
	236, 41, 42, 236, 237, 237, 88, 41, 
	42, 238, 238, 88, 41, 42, 239, 239, 
	88, 41, 42, 240, 240, 88, 41, 42, 
	241, 88, 41, 42, 242, 88, 41, 42, 
	243, 88, 41, 42, 244, 88, 213, 214, 
	88, 233, 148, 149, 234, 245, 245, 232, 
	233, 148, 149, 234, 246, 246, 232, 233, 
	148, 149, 234, 247, 247, 232, 233, 148, 
	149, 234, 248, 232, 233, 148, 149, 234, 
	249, 232, 233, 148, 149, 234, 250, 232, 
	233, 148, 149, 234, 251, 232, 233, 226, 
	227, 234, 232, 127, 16, 16, 130, 134, 
	252, 252, 126, 127, 16, 16, 130, 134, 
	253, 253, 126, 127, 16, 16, 130, 134, 
	254, 254, 126, 127, 16, 16, 130, 134, 
	255, 255, 126, 127, 16, 16, 130, 134, 
	256, 256, 126, 127, 16, 16, 130, 134, 
	257, 257, 126, 127, 16, 16, 130, 134, 
	258, 258, 126, 127, 16, 16, 130, 259, 
	134, 126, 127, 16, 16, 130, 134, 260, 
	260, 126, 127, 16, 16, 130, 134, 261, 
	261, 126, 127, 16, 16, 130, 134, 262, 
	262, 126, 127, 16, 16, 130, 134, 263, 
	263, 126, 127, 16, 16, 130, 134, 264, 
	264, 126, 127, 16, 16, 130, 134, 265, 
	265, 126, 127, 16, 16, 130, 134, 266, 
	266, 126, 127, 16, 16, 130, 134, 267, 
	267, 126, 127, 16, 16, 130, 268, 126, 
	269, 16, 16, 270, 271, 271, 145, 269, 
	148, 149, 270, 271, 150, 271, 150, 145, 
	272, 41, 42, 272, 107, 205, 107, 205, 
	40, 146, 148, 149, 147, 273, 273, 145, 
	146, 148, 149, 147, 274, 274, 145, 146, 
	148, 149, 147, 275, 275, 145, 146, 148, 
	149, 147, 276, 276, 145, 146, 148, 149, 
	147, 277, 277, 145, 146, 148, 149, 147, 
	278, 278, 145, 146, 279, 280, 147, 145, 
	127, 16, 16, 130, 134, 281, 281, 126, 
	127, 16, 16, 130, 134, 282, 282, 126, 
	127, 16, 16, 130, 134, 283, 283, 126, 
	127, 16, 16, 130, 284, 134, 126, 127, 
	16, 16, 130, 134, 285, 126, 127, 16, 
	16, 130, 286, 134, 126, 127, 16, 16, 
	130, 134, 287, 126, 127, 124, 125, 130, 
	134, 126, 19, 288, 20, 16, 167, 168, 
	16, 289, 290, 290, 290, 1, 291, 292, 
	293, 293, 293, 1, 294, 294, 295, 296, 
	297, 298, 294, 294, 294, 1, 295, 1, 
	291, 292, 291, 300, 301, 302, 301, 303, 
	293, 293, 293, 294, 294, 294, 299, 294, 
	299, 294, 299, 294, 1, 304, 1, 304, 
	304, 294, 305, 296, 305, 298, 294, 294, 
	294, 1, 295, 297, 294, 295, 296, 297, 
	298, 294, 294, 294, 1, 305, 1, 305, 
	305, 294, 305, 296, 305, 298, 294, 294, 
	294, 1, 0, 2, 3, 4, 5, 6, 
	7, 8, 0, 2, 3, 4, 5, 6, 
	7, 8, 1, 19, 20, 306, 307, 308, 
	309, 310, 311, 312, 313, 306, 307, 308, 
	309, 310, 311, 312, 313, 16, 289, 290, 
	290, 290, 1, 294, 294, 295, 296, 297, 
	298, 290, 290, 290, 294, 294, 294, 314, 
	294, 314, 294, 314, 294, 1, 0
};

static const short _http_cli_trans_targs[] = {
	2, 0, 26, 31, 32, 35, 38, 43, 
	46, 3, 4, 5, 6, 7, 8, 9, 
	10, 252, 9, 11, 12, 100, 12, 13, 
	14, 15, 16, 17, 18, 19, 20, 21, 
	99, 22, 264, 48, 49, 67, 73, 23, 
	24, 25, 65, 22, 264, 48, 49, 67, 
	73, 27, 28, 29, 30, 33, 34, 36, 
	37, 39, 42, 40, 41, 44, 45, 47, 
	35, 50, 51, 52, 53, 54, 55, 56, 
	57, 58, 59, 60, 61, 62, 63, 64, 
	66, 25, 65, 66, 68, 69, 70, 71, 
	72, 74, 75, 76, 77, 78, 79, 80, 
	81, 82, 83, 84, 85, 86, 87, 88, 
	89, 90, 91, 92, 93, 94, 95, 96, 
	97, 98, 25, 65, 21, 101, 102, 103, 
	104, 105, 106, 107, 108, 251, 109, 110, 
	265, 155, 111, 156, 192, 216, 120, 243, 
	111, 112, 113, 114, 115, 116, 117, 118, 
	119, 121, 122, 183, 123, 172, 184, 109, 
	110, 265, 155, 111, 156, 192, 216, 125, 
	126, 127, 128, 129, 130, 131, 132, 131, 
	132, 131, 132, 134, 135, 136, 137, 140, 
	141, 143, 144, 146, 149, 147, 148, 151, 
	152, 154, 142, 157, 158, 159, 160, 161, 
	162, 163, 164, 165, 166, 167, 168, 169, 
	170, 171, 173, 182, 173, 174, 175, 176, 
	177, 178, 179, 180, 181, 25, 65, 123, 
	172, 182, 183, 185, 186, 187, 188, 189, 
	190, 191, 123, 172, 193, 194, 195, 196, 
	197, 198, 199, 208, 199, 200, 201, 202, 
	203, 204, 205, 206, 207, 209, 210, 211, 
	212, 213, 214, 215, 217, 218, 219, 220, 
	221, 222, 223, 224, 225, 226, 227, 228, 
	229, 230, 231, 232, 233, 234, 235, 236, 
	235, 237, 238, 239, 240, 241, 242, 123, 
	172, 244, 245, 246, 247, 248, 249, 250, 
	108, 266, 255, 256, 259, 255, 256, 267, 
	257, 268, 261, 258, 260, 268, 262, 263, 
	256, 268, 124, 133, 138, 139, 142, 145, 
	150, 153, 258
};

static const char _http_cli_trans_actions[] = {
	25, 0, 25, 25, 25, 25, 25, 25, 
	25, 19, 19, 19, 19, 19, 19, 28, 
	19, 19, 19, 31, 31, 49, 19, 49, 
	49, 49, 49, 49, 49, 49, 49, 1, 
	1, 0, 34, 0, 0, 0, 0, 0, 
	0, 0, 0, 7, 85, 7, 7, 7, 
	7, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	40, 3, 3, 11, 0, 0, 0, 0, 
	17, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 5, 5, 0, 49, 49, 49, 
	49, 49, 49, 49, 37, 37, 19, 31, 
	93, 19, 31, 19, 19, 19, 19, 49, 
	19, 49, 49, 49, 49, 49, 49, 49, 
	49, 19, 31, 31, 19, 19, 49, 61, 
	77, 105, 61, 77, 61, 61, 61, 19, 
	19, 19, 19, 19, 19, 73, 73, 31, 
	31, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 31, 31, 97, 19, 49, 49, 49, 
	49, 49, 49, 49, 49, 1, 1, 55, 
	55, 64, 19, 49, 49, 49, 49, 49, 
	49, 49, 37, 37, 19, 19, 19, 19, 
	67, 81, 81, 89, 67, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 31, 31, 19, 
	19, 19, 19, 19, 19, 19, 19, 58, 
	58, 49, 49, 49, 49, 49, 49, 49, 
	19, 9, 43, 70, 21, 13, 0, 23, 
	0, 23, 0, 13, 21, 101, 21, 21, 
	15, 46, 52, 52, 52, 52, 52, 52, 
	52, 52, 43
};

static const int http_cli_start = 1;
static const int http_cli_first_final = 264;
static const int http_cli_error = 0;

static const int http_cli_en_http_content = 253;
static const int http_cli_en_http_chunked_content = 254;
static const int http_cli_en_main = 1;


/* #line 79 "http_parser.rl" */

void http_state_t::init_cli(http_state_t::callback f)
{
    end_message = f;
	
/* #line 1319 "http_parser.cc" */
	{
	cs = http_cli_start;
	top = 0;
	}

/* #line 84 "http_parser.rl" */
}

int http_state_t::parse_cli(const char *data, int length, int isEof)
{
	const char *p = data;
	const char *pe = data + length;
	const char *eof = isEof ? pe : 0;
    bool cli = true;

	
/* #line 1336 "http_parser.cc" */
	{
	int _klen;
	unsigned int _trans;
	short _widec;
	const char *_acts;
	unsigned int _nacts;
	const short *_keys;

	if ( p == pe )
		goto _test_eof;
	if ( cs == 0 )
		goto _out;
_resume:
	_widec = (*p);
	_klen = _http_cli_cond_lengths[cs];
	_keys = _http_cli_cond_keys + (_http_cli_cond_offsets[cs]*2);
	if ( _klen > 0 ) {
		const short *_lower = _keys;
		const short *_mid;
		const short *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( _widec < _mid[0] )
				_upper = _mid - 2;
			else if ( _widec > _mid[1] )
				_lower = _mid + 2;
			else {
				switch ( _http_cli_cond_spaces[_http_cli_cond_offsets[cs] + ((_mid - _keys)>>1)] ) {
	case 0: {
		_widec = (short)(128 + ((*p) - -128));
		if ( 
/* #line 123 "./http.rl" */
data_read_len-- > 0 ) _widec += 256;
		break;
	}
	case 1: {
		_widec = (short)(640 + ((*p) - -128));
		if ( 
/* #line 123 "./http.rl" */
data_read_len <= 0 ) _widec += 256;
		break;
	}
	case 2: {
		_widec = (short)(1152 + ((*p) - -128));
		if ( 
/* #line 123 "./http.rl" */
data_read_len-- > 0 ) _widec += 256;
		if ( 
/* #line 123 "./http.rl" */
data_read_len <= 0 ) _widec += 512;
		break;
	}
				}
				break;
			}
		}
	}

	_keys = _http_cli_trans_keys + _http_cli_key_offsets[cs];
	_trans = _http_cli_index_offsets[cs];

	_klen = _http_cli_single_lengths[cs];
	if ( _klen > 0 ) {
		const short *_lower = _keys;
		const short *_mid;
		const short *_upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( _widec < *_mid )
				_upper = _mid - 1;
			else if ( _widec > *_mid )
				_lower = _mid + 1;
			else {
				_trans += (unsigned int)(_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _http_cli_range_lengths[cs];
	if ( _klen > 0 ) {
		const short *_lower = _keys;
		const short *_mid;
		const short *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( _widec < _mid[0] )
				_upper = _mid - 2;
			else if ( _widec > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += (unsigned int)((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}

_match:
	_trans = _http_cli_indicies[_trans];
	cs = _http_cli_trans_targs[_trans];

	if ( _http_cli_trans_actions[_trans] == 0 )
		goto _again;

	_acts = _http_cli_actions + _http_cli_trans_actions[_trans];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 )
	{
		switch ( *_acts++ )
		{
	case 0:
/* #line 15 "./http.rl" */
	{
        clear();
    }
	break;
	case 1:
/* #line 19 "./http.rl" */
	{
	}
	break;
	case 2:
/* #line 22 "./http.rl" */
	{
	}
	break;
	case 3:
/* #line 25 "./http.rl" */
	{
	}
	break;
	case 4:
/* #line 28 "./http.rl" */
	{
	}
	break;
	case 5:
/* #line 34 "./http.rl" */
	{
        if(chunked != 0) {
            {stack[top++] = cs; cs = 254; goto _again;}
        }
        else if(content_len!=0) {
            content_start = len + (p-data);
            {stack[top++] = cs; cs = 253; goto _again;}
        }

        end_msg(cli, this);
	}
	break;
	case 6:
/* #line 46 "./http.rl" */
	{
        content_len = data_len;
        content_len_str = std::to_string(content_len);
	}
	break;
	case 7:
/* #line 51 "./http.rl" */
	{
        chunked = 1;
	}
	break;
	case 8:
/* #line 55 "./http.rl" */
	{
	}
	break;
	case 9:
/* #line 58 "./http.rl" */
	{
        if(content_start && len+(p-data) - content_start >= content_len)
        {
            end_msg(cli, this);
            {cs = stack[--top]; goto _again;}
        }
	}
	break;
	case 10:
/* #line 67 "./http.rl" */
	{
        data_len = 0;
        data_read_len = 0;
    }
	break;
	case 11:
/* #line 73 "./http.rl" */
	{
        int digit = (*p) - '0';
        data_len = (data_len * 10) + digit;
    }
	break;
	case 12:
/* #line 79 "./http.rl" */
	{
        data_len = (data_len <<4 ) + (*p>='a'?*p-87:(*p>='A'?*p-55:*p-'0'));
    }
	break;
	case 13:
/* #line 84 "./http.rl" */
	{
        data_read_len = data_len;
    }
	break;
	case 14:
/* #line 97 "./http.rl" */
	{add(protocol,*p);}
	break;
	case 15:
/* #line 103 "./http.rl" */
	{add(host,*p);}
	break;
	case 16:
/* #line 109 "./http.rl" */
	{add(req_line,*p);}
	break;
	case 17:
/* #line 119 "./http.rl" */
	{
        content_len += data_len;
    }
	break;
	case 18:
/* #line 123 "./http.rl" */
	{if(data_len==0) { content_len_str = std::to_string(content_len); end_msg(cli, this); {cs = stack[--top]; goto _again;}}}
	break;
/* #line 1575 "http_parser.cc" */
		}
	}

_again:
	if ( cs == 0 )
		goto _out;
	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	_out: {}
	}

/* #line 94 "http_parser.rl" */

    len += length;
    if ( cs == http_cli_error )
        return -1;
    return 0;
}

#ifdef TEST
int main(int argc, char **argv)
{
    if(argc<3)
    {
        printf("No enough parameter given\n");
        return -1;
    }
    FILE *fcli = fopen(argv[1],"r");
    if(!fcli)
    {
        printf("Error open file %s\n", argv[1]);
        return -1;
    }
    FILE *fsrv = fopen(argv[2],"r");
    if(!fsrv)
    {
        printf("Error open file %s\n", argv[2]);
        return -1;
    }

    std::list<std::string> reqs;
    auto got_cli = [&reqs](std::string str)
    {
        reqs.push_back(str);
    };

    auto got_srv = [&reqs](std::string str)
    {
        if(reqs.empty())
        {
            std::cout << "Error: no requests!" << std::endl;
            return;
        }
        std::cout << reqs.front() << " " << str << std::endl;
        reqs.pop_front();
    };

    char buf[1];

    http_state_t state_cli;
    state_cli.init_cli(got_cli);
    int res = 0;
    while(!res && !feof(fcli))
    {
        int rd = fread(buf,1,sizeof(buf),fcli);
        if(!rd)break;
        res = state_cli.parse_cli(buf, rd, 0);
        if(res<0)
            std::cout << "Error parse cli side" << std::endl;
    }

    http_state_t state_srv;
    state_srv.init_srv(got_srv);
    res = 0;
    while(!res && !feof(fsrv))
    {
        int rd = fread(buf,1,sizeof(buf),fsrv);
        if(!rd)break;
        res = state_srv.parse_srv(buf, rd, 0);
        if(res<0)
            std::cout << "Error parse srv side" << std::endl;
    }

    fclose(fcli);
    fclose(fsrv);

    return 0;
}
#endif
